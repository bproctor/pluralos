
/*
 *  start.S
 *  Copyright (c) 2001-2002 Brad Proctor
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

/*
 * $Id: start.S,v 1.15 2002/12/05 06:23:25 fredlie Exp $
 */


#include <config.h>
#include <asm.h>

#define CACHE_EAX               0
#define CACHE_EBX               4
#define CACHE_ECX               8
#define CACHE_EDX               12
#define VENDOR_ID               16
#define CPUID_FLAG              32
#define CPU_TYPE                36
#define CPU_SIGNATURE           40
#define FEATURES_EBX            44
#define FEATURES_ECX            48
#define FEATURES_EDX            52
#define FP_STATUS               56
#define FPU_TYPE                60
#define BRAND_STRING            64

.text
.org    0x0000

multiboot_header:
                .long   0x1BADB002              /* Magic Number    */
                .long   0x10000                 /* Flags           */
                .long   -(0x1BADB002+0x10000)   /* Checksum        */
                .long   multiboot_header        /* Header addr     */
                .long   0x100000                /* Load Start addr */
                .long   _bss                    /* Load end addr   */
                .long   _end                    /* BSS end addr    */
                .long   0x107000                /* Entry           */
        
.org    0x1000
idt:            .fill   256,8,0         /* 256 Entries for the IDT */

.org    0x1800
gdt:            .quad   0x0000000000000000  /* 0x00 Empty                */
                .quad   0x00CF9A000000FFFF  /* 0x08 Kernel Code  CS=0x08 */
                .quad   0x00CF92000000FFFF  /* 0x10 Kernel Data  DS=0x10 */
                .quad   0x00CFFA000000FFFF  /* 0x18 User Code    CS=0x1B */
                .quad   0x00CFF2000000FFFF  /* 0x20 User Data    DS=0x23 */
                .quad   0x00CFBA000000FFFF  /* 0x28 Reserved     CS=0x29 */
                .quad   0x00CFB2000000FFFF  /* 0x30 Reserved     DS=0x31 */
                .quad   0x00CFDA000000FFFF  /* 0x38 Reserved     CS=0x3A */
                .quad   0x00CFD2000000FFFF  /* 0x40 Reserved     DS=0x42 */
                .quad   0x0000000000000000  /* 0x48 Reserved             */
                .quad   0x0000000000000000  /* 0x50 Reserved             */
                .quad   0x0000000000000000  /* 0x58 Reserved             */
                .quad   0x0000000000000000  /* 0x60 Reserved             */
                .quad   0x0000000000000000  /* 0x68 First TSS for Kernel */
                .fill   1266,8,0            /* Space for TSSs */

.org    0x4000
pdir:           .long   ptbl+3
                .long   ptbl1+3
                .fill   1022,4,0

/* Two page tables are setup here, for the first 8Mb */

.org    0x5000
ptbl:
.long   0x000003, 0x001003, 0x002003, 0x003003, 0x004003, 0x005003, 0x006003, 0x007003, 0x008003, 0x009003, 0x00A003, 0x00B003, 0x00C003, 0x00D003, 0x00E003, 0x00F007
.long   0x010003, 0x011003, 0x012003, 0x013003, 0x014003, 0x015003, 0x016003, 0x017003, 0x018003, 0x019003, 0x01A003, 0x01B003, 0x01C003, 0x01D003, 0x01E003, 0x01F007
.long   0x020003, 0x021003, 0x022003, 0x023003, 0x024003, 0x025003, 0x026003, 0x027003, 0x028003, 0x029003, 0x02A003, 0x02B003, 0x02C003, 0x02D003, 0x02E003, 0x02F007
.long   0x030003, 0x031003, 0x032003, 0x033003, 0x034003, 0x035003, 0x036003, 0x037003, 0x038003, 0x039003, 0x03A003, 0x03B003, 0x03C003, 0x03D003, 0x03E003, 0x03F007
.long   0x040003, 0x041003, 0x042003, 0x043003, 0x044003, 0x045003, 0x046003, 0x047003, 0x048003, 0x049003, 0x04A003, 0x04B003, 0x04C003, 0x04D003, 0x04E003, 0x04F007
.long   0x050003, 0x051003, 0x052003, 0x053003, 0x054003, 0x055003, 0x056003, 0x057003, 0x058003, 0x059003, 0x05A003, 0x05B003, 0x05C003, 0x05D003, 0x05E003, 0x05F007
.long   0x060003, 0x061003, 0x062003, 0x063003, 0x064003, 0x065003, 0x066003, 0x067003, 0x068003, 0x069003, 0x06A003, 0x06B003, 0x06C003, 0x06D003, 0x06E003, 0x06F007
.long   0x070003, 0x071003, 0x072003, 0x073003, 0x074003, 0x075003, 0x076003, 0x077003, 0x078003, 0x079003, 0x07A003, 0x07B003, 0x07C003, 0x07D003, 0x07E003, 0x07F007
.long   0x080003, 0x081003, 0x082003, 0x083003, 0x084003, 0x085003, 0x086003, 0x087003, 0x088003, 0x089003, 0x08A003, 0x08B003, 0x08C003, 0x08D003, 0x08E003, 0x08F007
.long   0x090003, 0x091003, 0x092003, 0x093003, 0x094003, 0x095003, 0x096003, 0x097003, 0x098003, 0x099003, 0x09A003, 0x09B003, 0x09C003, 0x09D003, 0x09E003, 0x09F007
.long   0x0A0003, 0x0A1003, 0x0A2003, 0x0A3003, 0x0A4003, 0x0A5003, 0x0A6003, 0x0A7003, 0x0A8003, 0x0A9003, 0x0AA003, 0x0AB003, 0x0AC003, 0x0AD003, 0x0AE003, 0x0AF007
.long   0x0B0003, 0x0B1003, 0x0B2003, 0x0B3003, 0x0B4003, 0x0B5003, 0x0B6003, 0x0B7003, 0x0B8003, 0x0B9003, 0x0BA003, 0x0BB003, 0x0BC003, 0x0BD003, 0x0BE003, 0x0BF007
.long   0x0C0003, 0x0C1003, 0x0C2003, 0x0C3003, 0x0C4003, 0x0C5003, 0x0C6003, 0x0C7003, 0x0C8003, 0x0C9003, 0x0CA003, 0x0CB003, 0x0CC003, 0x0CD003, 0x0CE003, 0x0CF007
.long   0x0D0003, 0x0D1003, 0x0D2003, 0x0D3003, 0x0D4003, 0x0D5003, 0x0D6003, 0x0D7003, 0x0D8003, 0x0D9003, 0x0DA003, 0x0DB003, 0x0DC003, 0x0DD003, 0x0DE003, 0x0DF007
.long   0x0E0003, 0x0E1003, 0x0E2003, 0x0E3003, 0x0E4003, 0x0E5003, 0x0E6003, 0x0E7003, 0x0E8003, 0x0E9003, 0x0EA003, 0x0EB003, 0x0EC003, 0x0ED003, 0x0EE003, 0x0EF007
.long   0x0F0003, 0x0F1003, 0x0F2003, 0x0F3003, 0x0F4003, 0x0F5003, 0x0F6003, 0x0F7003, 0x0F8003, 0x0F9003, 0x0FA003, 0x0FB003, 0x0FC003, 0x0FD003, 0x0FE003, 0x0FF007
.long   0x100003, 0x101003, 0x102003, 0x103003, 0x104003, 0x105003, 0x106003, 0x107003, 0x108003, 0x109003, 0x10A003, 0x10B003, 0x10C003, 0x10D003, 0x10E003, 0x10F007
.long   0x110003, 0x111003, 0x112003, 0x113003, 0x114003, 0x115003, 0x116003, 0x117003, 0x118003, 0x119003, 0x11A003, 0x11B003, 0x11C003, 0x11D003, 0x11E003, 0x11F007
.long   0x120003, 0x121003, 0x122003, 0x123003, 0x124003, 0x125003, 0x126003, 0x127003, 0x128003, 0x129003, 0x12A003, 0x12B003, 0x12C003, 0x12D003, 0x12E003, 0x12F007
.long   0x130003, 0x131003, 0x132003, 0x133003, 0x134003, 0x135003, 0x136003, 0x137003, 0x138003, 0x139003, 0x13A003, 0x13B003, 0x13C003, 0x13D003, 0x13E003, 0x13F007
.long   0x140003, 0x141003, 0x142003, 0x143003, 0x144003, 0x145003, 0x146003, 0x147003, 0x148003, 0x149003, 0x14A003, 0x14B003, 0x14C003, 0x14D003, 0x14E003, 0x14F007
.long   0x150003, 0x151003, 0x152003, 0x153003, 0x154003, 0x155003, 0x156003, 0x157003, 0x158003, 0x159003, 0x15A003, 0x15B003, 0x15C003, 0x15D003, 0x15E003, 0x15F007
.long   0x160003, 0x161003, 0x162003, 0x163003, 0x164003, 0x165003, 0x166003, 0x167003, 0x168003, 0x169003, 0x16A003, 0x16B003, 0x16C003, 0x16D003, 0x16E003, 0x16F007
.long   0x170003, 0x171003, 0x172003, 0x173003, 0x174003, 0x175003, 0x176003, 0x177003, 0x178003, 0x179003, 0x17A003, 0x17B003, 0x17C003, 0x17D003, 0x17E003, 0x17F007
.long   0x180003, 0x181003, 0x182003, 0x183003, 0x184003, 0x185003, 0x186003, 0x187003, 0x188003, 0x189003, 0x18A003, 0x18B003, 0x18C003, 0x18D003, 0x18E003, 0x18F007
.long   0x190003, 0x191003, 0x192003, 0x193003, 0x194003, 0x195003, 0x196003, 0x197003, 0x198003, 0x199003, 0x19A003, 0x19B003, 0x19C003, 0x19D003, 0x19E003, 0x19F007
.long   0x1A0003, 0x1A1003, 0x1A2003, 0x1A3003, 0x1A4003, 0x1A5003, 0x1A6003, 0x1A7003, 0x1A8003, 0x1A9003, 0x1AA003, 0x1AB003, 0x1AC003, 0x1AD003, 0x1AE003, 0x1AF007
.long   0x1B0003, 0x1B1003, 0x1B2003, 0x1B3003, 0x1B4003, 0x1B5003, 0x1B6003, 0x1B7003, 0x1B8003, 0x1B9003, 0x1BA003, 0x1BB003, 0x1BC003, 0x1BD003, 0x1BE003, 0x1BF007
.long   0x1C0003, 0x1C1003, 0x1C2003, 0x1C3003, 0x1C4003, 0x1C5003, 0x1C6003, 0x1C7003, 0x1C8003, 0x1C9003, 0x1CA003, 0x1CB003, 0x1CC003, 0x1CD003, 0x1CE003, 0x1CF007
.long   0x1D0003, 0x1D1003, 0x1D2003, 0x1D3003, 0x1D4003, 0x1D5003, 0x1D6003, 0x1D7003, 0x1D8003, 0x1D9003, 0x1DA003, 0x1DB003, 0x1DC003, 0x1DD003, 0x1DE003, 0x1DF007
.long   0x1E0003, 0x1E1003, 0x1E2003, 0x1E3003, 0x1E4003, 0x1E5003, 0x1E6003, 0x1E7003, 0x1E8003, 0x1E9003, 0x1EA003, 0x1EB003, 0x1EC003, 0x1ED003, 0x1EE003, 0x1EF007
.long   0x1F0003, 0x1F1003, 0x1F2003, 0x1F3003, 0x1F4003, 0x1F5003, 0x1F6003, 0x1F7003, 0x1F8003, 0x1F9003, 0x1FA003, 0x1FB003, 0x1FC003, 0x1FD003, 0x1FE003, 0x1FF007
.long   0x200003, 0x201003, 0x202003, 0x203003, 0x204003, 0x205003, 0x206003, 0x207003, 0x208003, 0x209003, 0x20A003, 0x20B003, 0x20C003, 0x20D003, 0x20E003, 0x20F007
.long   0x210003, 0x211003, 0x212003, 0x213003, 0x214003, 0x215003, 0x216003, 0x217003, 0x218003, 0x219003, 0x21A003, 0x21B003, 0x21C003, 0x21D003, 0x21E003, 0x21F007
.long   0x220003, 0x221003, 0x222003, 0x223003, 0x224003, 0x225003, 0x226003, 0x227003, 0x228003, 0x229003, 0x22A003, 0x22B003, 0x22C003, 0x22D003, 0x22E003, 0x22F007
.long   0x230003, 0x231003, 0x232003, 0x233003, 0x234003, 0x235003, 0x236003, 0x237003, 0x238003, 0x239003, 0x23A003, 0x23B003, 0x23C003, 0x23D003, 0x23E003, 0x23F007
.long   0x240003, 0x241003, 0x242003, 0x243003, 0x244003, 0x245003, 0x246003, 0x247003, 0x248003, 0x249003, 0x24A003, 0x24B003, 0x24C003, 0x24D003, 0x24E003, 0x24F007
.long   0x250003, 0x251003, 0x252003, 0x253003, 0x254003, 0x255003, 0x256003, 0x257003, 0x258003, 0x259003, 0x25A003, 0x25B003, 0x25C003, 0x25D003, 0x25E003, 0x25F007
.long   0x260003, 0x261003, 0x262003, 0x263003, 0x264003, 0x265003, 0x266003, 0x267003, 0x268003, 0x269003, 0x26A003, 0x26B003, 0x26C003, 0x26D003, 0x26E003, 0x26F007
.long   0x270003, 0x271003, 0x272003, 0x273003, 0x274003, 0x275003, 0x276003, 0x277003, 0x278003, 0x279003, 0x27A003, 0x27B003, 0x27C003, 0x27D003, 0x27E003, 0x27F007
.long   0x280003, 0x281003, 0x282003, 0x283003, 0x284003, 0x285003, 0x286003, 0x287003, 0x288003, 0x289003, 0x28A003, 0x28B003, 0x28C003, 0x28D003, 0x28E003, 0x28F007
.long   0x290003, 0x291003, 0x292003, 0x293003, 0x294003, 0x295003, 0x296003, 0x297003, 0x298003, 0x299003, 0x29A003, 0x29B003, 0x29C003, 0x29D003, 0x29E003, 0x29F007
.long   0x2A0003, 0x2A1003, 0x2A2003, 0x2A3003, 0x2A4003, 0x2A5003, 0x2A6003, 0x2A7003, 0x2A8003, 0x2A9003, 0x2AA003, 0x2AB003, 0x2AC003, 0x2AD003, 0x2AE003, 0x2AF007
.long   0x2B0003, 0x2B1003, 0x2B2003, 0x2B3003, 0x2B4003, 0x2B5003, 0x2B6003, 0x2B7003, 0x2B8003, 0x2B9003, 0x2BA003, 0x2BB003, 0x2BC003, 0x2BD003, 0x2BE003, 0x2BF007
.long   0x2C0003, 0x2C1003, 0x2C2003, 0x2C3003, 0x2C4003, 0x2C5003, 0x2C6003, 0x2C7003, 0x2C8003, 0x2C9003, 0x2CA003, 0x2CB003, 0x2CC003, 0x2CD003, 0x2CE003, 0x2CF007
.long   0x2D0003, 0x2D1003, 0x2D2003, 0x2D3003, 0x2D4003, 0x2D5003, 0x2D6003, 0x2D7003, 0x2D8003, 0x2D9003, 0x2DA003, 0x2DB003, 0x2DC003, 0x2DD003, 0x2DE003, 0x2DF007
.long   0x2E0003, 0x2E1003, 0x2E2003, 0x2E3003, 0x2E4003, 0x2E5003, 0x2E6003, 0x2E7003, 0x2E8003, 0x2E9003, 0x2EA003, 0x2EB003, 0x2EC003, 0x2ED003, 0x2EE003, 0x2EF007
.long   0x2F0003, 0x2F1003, 0x2F2003, 0x2F3003, 0x2F4003, 0x2F5003, 0x2F6003, 0x2F7003, 0x2F8003, 0x2F9003, 0x2FA003, 0x2FB003, 0x2FC003, 0x2FD003, 0x2FE003, 0x2FF007
.long   0x300003, 0x301003, 0x302003, 0x303003, 0x304003, 0x305003, 0x306003, 0x307003, 0x308003, 0x309003, 0x30A003, 0x30B003, 0x30C003, 0x30D003, 0x30E003, 0x30F007
.long   0x310003, 0x311003, 0x312003, 0x313003, 0x314003, 0x315003, 0x316003, 0x317003, 0x318003, 0x319003, 0x31A003, 0x31B003, 0x31C003, 0x31D003, 0x31E003, 0x31F007
.long   0x320003, 0x321003, 0x322003, 0x323003, 0x324003, 0x325003, 0x326003, 0x327003, 0x328003, 0x329003, 0x32A003, 0x32B003, 0x32C003, 0x32D003, 0x32E003, 0x32F007
.long   0x330003, 0x331003, 0x332003, 0x333003, 0x334003, 0x335003, 0x336003, 0x337003, 0x338003, 0x339003, 0x33A003, 0x33B003, 0x33C003, 0x33D003, 0x33E003, 0x33F007
.long   0x340003, 0x341003, 0x342003, 0x343003, 0x344003, 0x345003, 0x346003, 0x347003, 0x348003, 0x349003, 0x34A003, 0x34B003, 0x34C003, 0x34D003, 0x34E003, 0x34F007
.long   0x350003, 0x351003, 0x352003, 0x353003, 0x354003, 0x355003, 0x356003, 0x357003, 0x358003, 0x359003, 0x35A003, 0x35B003, 0x35C003, 0x35D003, 0x35E003, 0x35F007
.long   0x360003, 0x361003, 0x362003, 0x363003, 0x364003, 0x365003, 0x366003, 0x367003, 0x368003, 0x369003, 0x36A003, 0x36B003, 0x36C003, 0x36D003, 0x36E003, 0x36F007
.long   0x370003, 0x371003, 0x372003, 0x373003, 0x374003, 0x375003, 0x376003, 0x377003, 0x378003, 0x379003, 0x37A003, 0x37B003, 0x37C003, 0x37D003, 0x37E003, 0x37F007
.long   0x380003, 0x381003, 0x382003, 0x383003, 0x384003, 0x385003, 0x386003, 0x387003, 0x388003, 0x389003, 0x38A003, 0x38B003, 0x38C003, 0x38D003, 0x38E003, 0x38F007
.long   0x390003, 0x391003, 0x392003, 0x393003, 0x394003, 0x395003, 0x396003, 0x397003, 0x398003, 0x399003, 0x39A003, 0x39B003, 0x39C003, 0x39D003, 0x39E003, 0x39F007
.long   0x3A0003, 0x3A1003, 0x3A2003, 0x3A3003, 0x3A4003, 0x3A5003, 0x3A6003, 0x3A7003, 0x3A8003, 0x3A9003, 0x3AA003, 0x3AB003, 0x3AC003, 0x3AD003, 0x3AE003, 0x3AF007
.long   0x3B0003, 0x3B1003, 0x3B2003, 0x3B3003, 0x3B4003, 0x3B5003, 0x3B6003, 0x3B7003, 0x3B8003, 0x3B9003, 0x3BA003, 0x3BB003, 0x3BC003, 0x3BD003, 0x3BE003, 0x3BF007
.long   0x3C0003, 0x3C1003, 0x3C2003, 0x3C3003, 0x3C4003, 0x3C5003, 0x3C6003, 0x3C7003, 0x3C8003, 0x3C9003, 0x3CA003, 0x3CB003, 0x3CC003, 0x3CD003, 0x3CE003, 0x3CF007
.long   0x3D0003, 0x3D1003, 0x3D2003, 0x3D3003, 0x3D4003, 0x3D5003, 0x3D6003, 0x3D7003, 0x3D8003, 0x3D9003, 0x3DA003, 0x3DB003, 0x3DC003, 0x3DD003, 0x3DE003, 0x3DF007
.long   0x3E0003, 0x3E1003, 0x3E2003, 0x3E3003, 0x3E4003, 0x3E5003, 0x3E6003, 0x3E7003, 0x3E8003, 0x3E9003, 0x3EA003, 0x3EB003, 0x3EC003, 0x3ED003, 0x3EE003, 0x3EF007
.long   0x3F0003, 0x3F1003, 0x3F2003, 0x3F3003, 0x3F4003, 0x3F5003, 0x3F6003, 0x3F7003, 0x3F8003, 0x3F9003, 0x3FA003, 0x3FB003, 0x3FC003, 0x3FD003, 0x3FE003, 0x3FF007

.org    0x6000
ptbl1:
.long   0x400003, 0x401003, 0x402003, 0x403003, 0x404003, 0x405003, 0x406003, 0x407003, 0x408003, 0x409003, 0x40A003, 0x40B003, 0x40C003, 0x40D003, 0x40E003, 0x40F007
.long   0x410003, 0x411003, 0x412003, 0x413003, 0x414003, 0x415003, 0x416003, 0x417003, 0x418003, 0x419003, 0x41A003, 0x41B003, 0x41C003, 0x41D003, 0x41E003, 0x41F007
.long   0x420003, 0x421003, 0x422003, 0x423003, 0x424003, 0x425003, 0x426003, 0x427003, 0x428003, 0x429003, 0x42A003, 0x42B003, 0x42C003, 0x42D003, 0x42E003, 0x42F007
.long   0x430003, 0x431003, 0x432003, 0x433003, 0x434003, 0x435003, 0x436003, 0x437003, 0x438003, 0x439003, 0x43A003, 0x43B003, 0x43C003, 0x43D003, 0x43E003, 0x43F007
.long   0x440003, 0x441003, 0x442003, 0x443003, 0x444003, 0x445003, 0x446003, 0x447003, 0x448003, 0x449003, 0x44A003, 0x44B003, 0x44C003, 0x44D003, 0x44E003, 0x44F007
.long   0x450003, 0x451003, 0x452003, 0x453003, 0x454003, 0x455003, 0x456003, 0x457003, 0x458003, 0x459003, 0x45A003, 0x45B003, 0x45C003, 0x45D003, 0x45E003, 0x45F007
.long   0x460003, 0x461003, 0x462003, 0x463003, 0x464003, 0x465003, 0x466003, 0x467003, 0x468003, 0x469003, 0x46A003, 0x46B003, 0x46C003, 0x46D003, 0x46E003, 0x46F007
.long   0x470003, 0x471003, 0x472003, 0x473003, 0x474003, 0x475003, 0x476003, 0x477003, 0x478003, 0x479003, 0x47A003, 0x47B003, 0x47C003, 0x47D003, 0x47E003, 0x47F007
.long   0x480003, 0x481003, 0x482003, 0x483003, 0x484003, 0x485003, 0x486003, 0x487003, 0x488003, 0x489003, 0x48A003, 0x48B003, 0x48C003, 0x48D003, 0x48E003, 0x48F007
.long   0x490003, 0x491003, 0x492003, 0x493003, 0x494003, 0x495003, 0x496003, 0x497003, 0x498003, 0x499003, 0x49A003, 0x49B003, 0x49C003, 0x49D003, 0x49E003, 0x49F007
.long   0x4A0003, 0x4A1003, 0x4A2003, 0x4A3003, 0x4A4003, 0x4A5003, 0x4A6003, 0x4A7003, 0x4A8003, 0x4A9003, 0x4AA003, 0x4AB003, 0x4AC003, 0x4AD003, 0x4AE003, 0x4AF007
.long   0x4B0003, 0x4B1003, 0x4B2003, 0x4B3003, 0x4B4003, 0x4B5003, 0x4B6003, 0x4B7003, 0x4B8003, 0x4B9003, 0x4BA003, 0x4BB003, 0x4BC003, 0x4BD003, 0x4BE003, 0x4BF007
.long   0x4C0003, 0x4C1003, 0x4C2003, 0x4C3003, 0x4C4003, 0x4C5003, 0x4C6003, 0x4C7003, 0x4C8003, 0x4C9003, 0x4CA003, 0x4CB003, 0x4CC003, 0x4CD003, 0x4CE003, 0x4CF007
.long   0x4D0003, 0x4D1003, 0x4D2003, 0x4D3003, 0x4D4003, 0x4D5003, 0x4D6003, 0x4D7003, 0x4D8003, 0x4D9003, 0x4DA003, 0x4DB003, 0x4DC003, 0x4DD003, 0x4DE003, 0x4DF007
.long   0x4E0003, 0x4E1003, 0x4E2003, 0x4E3003, 0x4E4003, 0x4E5003, 0x4E6003, 0x4E7003, 0x4E8003, 0x4E9003, 0x4EA003, 0x4EB003, 0x4EC003, 0x4ED003, 0x4EE003, 0x4EF007
.long   0x4F0003, 0x4F1003, 0x4F2003, 0x4F3003, 0x4F4003, 0x4F5003, 0x4F6003, 0x4F7003, 0x4F8003, 0x4F9003, 0x4FA003, 0x4FB003, 0x4FC003, 0x4FD003, 0x4FE003, 0x4FF007
.long   0x500003, 0x501003, 0x502003, 0x503003, 0x504003, 0x505003, 0x506003, 0x507003, 0x508003, 0x509003, 0x50A003, 0x50B003, 0x50C003, 0x50D003, 0x50E003, 0x50F007
.long   0x510003, 0x511003, 0x512003, 0x513003, 0x514003, 0x515003, 0x516003, 0x517003, 0x518003, 0x519003, 0x51A003, 0x51B003, 0x51C003, 0x51D003, 0x51E003, 0x51F007
.long   0x520003, 0x521003, 0x522003, 0x523003, 0x524003, 0x525003, 0x526003, 0x527003, 0x528003, 0x529003, 0x52A003, 0x52B003, 0x52C003, 0x52D003, 0x52E003, 0x52F007
.long   0x530003, 0x531003, 0x532003, 0x533003, 0x534003, 0x535003, 0x536003, 0x537003, 0x538003, 0x539003, 0x53A003, 0x53B003, 0x53C003, 0x53D003, 0x53E003, 0x53F007
.long   0x540003, 0x541003, 0x542003, 0x543003, 0x544003, 0x545003, 0x546003, 0x547003, 0x548003, 0x549003, 0x54A003, 0x54B003, 0x54C003, 0x54D003, 0x54E003, 0x54F007
.long   0x550003, 0x551003, 0x552003, 0x553003, 0x554003, 0x555003, 0x556003, 0x557003, 0x558003, 0x559003, 0x55A003, 0x55B003, 0x55C003, 0x55D003, 0x55E003, 0x55F007
.long   0x560003, 0x561003, 0x562003, 0x563003, 0x564003, 0x565003, 0x566003, 0x567003, 0x568003, 0x569003, 0x56A003, 0x56B003, 0x56C003, 0x56D003, 0x56E003, 0x56F007
.long   0x570003, 0x571003, 0x572003, 0x573003, 0x574003, 0x575003, 0x576003, 0x577003, 0x578003, 0x579003, 0x57A003, 0x57B003, 0x57C003, 0x57D003, 0x57E003, 0x57F007
.long   0x580003, 0x581003, 0x582003, 0x583003, 0x584003, 0x585003, 0x586003, 0x587003, 0x588003, 0x589003, 0x58A003, 0x58B003, 0x58C003, 0x58D003, 0x58E003, 0x58F007
.long   0x590003, 0x591003, 0x592003, 0x593003, 0x594003, 0x595003, 0x596003, 0x597003, 0x598003, 0x599003, 0x59A003, 0x59B003, 0x59C003, 0x59D003, 0x59E003, 0x59F007
.long   0x5A0003, 0x5A1003, 0x5A2003, 0x5A3003, 0x5A4003, 0x5A5003, 0x5A6003, 0x5A7003, 0x5A8003, 0x5A9003, 0x5AA003, 0x5AB003, 0x5AC003, 0x5AD003, 0x5AE003, 0x5AF007
.long   0x5B0003, 0x5B1003, 0x5B2003, 0x5B3003, 0x5B4003, 0x5B5003, 0x5B6003, 0x5B7003, 0x5B8003, 0x5B9003, 0x5BA003, 0x5BB003, 0x5BC003, 0x5BD003, 0x5BE003, 0x5BF007
.long   0x5C0003, 0x5C1003, 0x5C2003, 0x5C3003, 0x5C4003, 0x5C5003, 0x5C6003, 0x5C7003, 0x5C8003, 0x5C9003, 0x5CA003, 0x5CB003, 0x5CC003, 0x5CD003, 0x5CE003, 0x5CF007
.long   0x5D0003, 0x5D1003, 0x5D2003, 0x5D3003, 0x5D4003, 0x5D5003, 0x5D6003, 0x5D7003, 0x5D8003, 0x5D9003, 0x5DA003, 0x5DB003, 0x5DC003, 0x5DD003, 0x5DE003, 0x5DF007
.long   0x5E0003, 0x5E1003, 0x5E2003, 0x5E3003, 0x5E4003, 0x5E5003, 0x5E6003, 0x5E7003, 0x5E8003, 0x5E9003, 0x5EA003, 0x5EB003, 0x5EC003, 0x5ED003, 0x5EE003, 0x5EF007
.long   0x5F0003, 0x5F1003, 0x5F2003, 0x5F3003, 0x5F4003, 0x5F5003, 0x5F6003, 0x5F7003, 0x5F8003, 0x5F9003, 0x5FA003, 0x5FB003, 0x5FC003, 0x5FD003, 0x5FE003, 0x5FF007
.long   0x600003, 0x601003, 0x602003, 0x603003, 0x604003, 0x605003, 0x606003, 0x607003, 0x608003, 0x609003, 0x60A003, 0x60B003, 0x60C003, 0x60D003, 0x60E003, 0x60F007
.long   0x610003, 0x611003, 0x612003, 0x613003, 0x614003, 0x615003, 0x616003, 0x617003, 0x618003, 0x619003, 0x61A003, 0x61B003, 0x61C003, 0x61D003, 0x61E003, 0x61F007
.long   0x620003, 0x621003, 0x622003, 0x623003, 0x624003, 0x625003, 0x626003, 0x627003, 0x628003, 0x629003, 0x62A003, 0x62B003, 0x62C003, 0x62D003, 0x62E003, 0x62F007
.long   0x630003, 0x631003, 0x632003, 0x633003, 0x634003, 0x635003, 0x636003, 0x637003, 0x638003, 0x639003, 0x63A003, 0x63B003, 0x63C003, 0x63D003, 0x63E003, 0x63F007
.long   0x640003, 0x641003, 0x642003, 0x643003, 0x644003, 0x645003, 0x646003, 0x647003, 0x648003, 0x649003, 0x64A003, 0x64B003, 0x64C003, 0x64D003, 0x64E003, 0x64F007
.long   0x650003, 0x651003, 0x652003, 0x653003, 0x654003, 0x655003, 0x656003, 0x657003, 0x658003, 0x659003, 0x65A003, 0x65B003, 0x65C003, 0x65D003, 0x65E003, 0x65F007
.long   0x660003, 0x661003, 0x662003, 0x663003, 0x664003, 0x665003, 0x666003, 0x667003, 0x668003, 0x669003, 0x66A003, 0x66B003, 0x66C003, 0x66D003, 0x66E003, 0x66F007
.long   0x670003, 0x671003, 0x672003, 0x673003, 0x674003, 0x675003, 0x676003, 0x677003, 0x678003, 0x679003, 0x67A003, 0x67B003, 0x67C003, 0x67D003, 0x67E003, 0x67F007
.long   0x680003, 0x681003, 0x682003, 0x683003, 0x684003, 0x685003, 0x686003, 0x687003, 0x688003, 0x689003, 0x68A003, 0x68B003, 0x68C003, 0x68D003, 0x68E003, 0x68F007
.long   0x690003, 0x691003, 0x692003, 0x693003, 0x694003, 0x695003, 0x696003, 0x697003, 0x698003, 0x699003, 0x69A003, 0x69B003, 0x69C003, 0x69D003, 0x69E003, 0x69F007
.long   0x6A0003, 0x6A1003, 0x6A2003, 0x6A3003, 0x6A4003, 0x6A5003, 0x6A6003, 0x6A7003, 0x6A8003, 0x6A9003, 0x6AA003, 0x6AB003, 0x6AC003, 0x6AD003, 0x6AE003, 0x6AF007
.long   0x6B0003, 0x6B1003, 0x6B2003, 0x6B3003, 0x6B4003, 0x6B5003, 0x6B6003, 0x6B7003, 0x6B8003, 0x6B9003, 0x6BA003, 0x6BB003, 0x6BC003, 0x6BD003, 0x6BE003, 0x6BF007
.long   0x6C0003, 0x6C1003, 0x6C2003, 0x6C3003, 0x6C4003, 0x6C5003, 0x6C6003, 0x6C7003, 0x6C8003, 0x6C9003, 0x6CA003, 0x6CB003, 0x6CC003, 0x6CD003, 0x6CE003, 0x6CF007
.long   0x6D0003, 0x6D1003, 0x6D2003, 0x6D3003, 0x6D4003, 0x6D5003, 0x6D6003, 0x6D7003, 0x6D8003, 0x6D9003, 0x6DA003, 0x6DB003, 0x6DC003, 0x6DD003, 0x6DE003, 0x6DF007
.long   0x6E0003, 0x6E1003, 0x6E2003, 0x6E3003, 0x6E4003, 0x6E5003, 0x6E6003, 0x6E7003, 0x6E8003, 0x6E9003, 0x6EA003, 0x6EB003, 0x6EC003, 0x6ED003, 0x6EE003, 0x6EF007
.long   0x6F0003, 0x6F1003, 0x6F2003, 0x6F3003, 0x6F4003, 0x6F5003, 0x6F6003, 0x6F7003, 0x6F8003, 0x6F9003, 0x6FA003, 0x6FB003, 0x6FC003, 0x6FD003, 0x6FE003, 0x6FF007
.long   0x700003, 0x701003, 0x702003, 0x703003, 0x704003, 0x705003, 0x706003, 0x707003, 0x708003, 0x709003, 0x70A003, 0x70B003, 0x70C003, 0x70D003, 0x70E003, 0x70F007
.long   0x710003, 0x711003, 0x712003, 0x713003, 0x714003, 0x715003, 0x716003, 0x717003, 0x718003, 0x719003, 0x71A003, 0x71B003, 0x71C003, 0x71D003, 0x71E003, 0x71F007
.long   0x720003, 0x721003, 0x722003, 0x723003, 0x724003, 0x725003, 0x726003, 0x727003, 0x728003, 0x729003, 0x72A003, 0x72B003, 0x72C003, 0x72D003, 0x72E003, 0x72F007
.long   0x730003, 0x731003, 0x732003, 0x733003, 0x734003, 0x735003, 0x736003, 0x737003, 0x738003, 0x739003, 0x73A003, 0x73B003, 0x73C003, 0x73D003, 0x73E003, 0x73F007
.long   0x740003, 0x741003, 0x742003, 0x743003, 0x744003, 0x745003, 0x746003, 0x747003, 0x748003, 0x749003, 0x74A003, 0x74B003, 0x74C003, 0x74D003, 0x74E003, 0x74F007
.long   0x750003, 0x751003, 0x752003, 0x753003, 0x754003, 0x755003, 0x756003, 0x757003, 0x758003, 0x759003, 0x75A003, 0x75B003, 0x75C003, 0x75D003, 0x75E003, 0x75F007
.long   0x760003, 0x761003, 0x762003, 0x763003, 0x764003, 0x765003, 0x766003, 0x767003, 0x768003, 0x769003, 0x76A003, 0x76B003, 0x76C003, 0x76D003, 0x76E003, 0x76F007
.long   0x770003, 0x771003, 0x772003, 0x773003, 0x774003, 0x775003, 0x776003, 0x777003, 0x778003, 0x779003, 0x77A003, 0x77B003, 0x77C003, 0x77D003, 0x77E003, 0x77F007
.long   0x780003, 0x781003, 0x782003, 0x783003, 0x784003, 0x785003, 0x786003, 0x787003, 0x788003, 0x789003, 0x78A003, 0x78B003, 0x78C003, 0x78D003, 0x78E003, 0x78F007
.long   0x790003, 0x791003, 0x792003, 0x793003, 0x794003, 0x795003, 0x796003, 0x797003, 0x798003, 0x799003, 0x79A003, 0x79B003, 0x79C003, 0x79D003, 0x79E003, 0x79F007
.long   0x7A0003, 0x7A1003, 0x7A2003, 0x7A3003, 0x7A4003, 0x7A5003, 0x7A6003, 0x7A7003, 0x7A8003, 0x7A9003, 0x7AA003, 0x7AB003, 0x7AC003, 0x7AD003, 0x7AE003, 0x7AF007
.long   0x7B0003, 0x7B1003, 0x7B2003, 0x7B3003, 0x7B4003, 0x7B5003, 0x7B6003, 0x7B7003, 0x7B8003, 0x7B9003, 0x7BA003, 0x7BB003, 0x7BC003, 0x7BD003, 0x7BE003, 0x7BF007
.long   0x7C0003, 0x7C1003, 0x7C2003, 0x7C3003, 0x7C4003, 0x7C5003, 0x7C6003, 0x7C7003, 0x7C8003, 0x7C9003, 0x7CA003, 0x7CB003, 0x7CC003, 0x7CD003, 0x7CE003, 0x7CF007
.long   0x7D0003, 0x7D1003, 0x7D2003, 0x7D3003, 0x7D4003, 0x7D5003, 0x7D6003, 0x7D7003, 0x7D8003, 0x7D9003, 0x7DA003, 0x7DB003, 0x7DC003, 0x7DD003, 0x7DE003, 0x7DF007
.long   0x7E0003, 0x7E1003, 0x7E2003, 0x7E3003, 0x7E4003, 0x7E5003, 0x7E6003, 0x7E7003, 0x7E8003, 0x7E9003, 0x7EA003, 0x7EB003, 0x7EC003, 0x7ED003, 0x7EE003, 0x7EF007
.long   0x7F0003, 0x7F1003, 0x7F2003, 0x7F3003, 0x7F4003, 0x7F5003, 0x7F6003, 0x7F7003, 0x7F8003, 0x7F9003, 0x7FA003, 0x7FB003, 0x7FC003, 0x7FD003, 0x7FE003, 0x7FF007

.org    0x7000
GLOBAL (_start):
        cli                             /* Clear all interrupts */
        cld                             /* Clear the direction flag */
        lgdt    gdtr                    /* Load the GDT register */
        lidt    idtr                    /* Load the IDT register */
        movl    $0x10,%eax              /* Set all selector registers */
        movl    %eax,%ds
        movl    %eax,%es
        movl    %eax,%fs
        movl    %eax,%gs
        lss     stack_start,%esp        /* 'lss' is safer */
        ljmp    $0x08,$next             /* Jump to new code segment */
next:        

/* 
 * Clear the BSS.
 * Note: This must be done before using the stack.
 *       (because the stack is located in the BSS section)
 */
        
        movl    $_bss,%edi
        movl    $_end,%ecx
        xorl    %eax,%eax
        subl    %edi,%ecx
        shrl    $2,%ecx
        incl    %ecx
        rep;    stosl


/* This section finds out how much memory we have */

        movl    $0x1FFFFC,%eax          /* Assume 1Mb to start */
        xorl    %ebx,%ebx
        movl    $0x12345678,%ecx        /* Used as a test string */
.p2align 2
1:
        movl    $0,(%eax)               /* First clear the memory */
        movl    %ecx,(%eax)             /* Now put test string in */
        movl    (%eax),%ebx             /* Get it back again */
        cmpl    %ecx,%ebx               /* Did we get it back ok? */
        jne     1f                      /* No, jump */
        addl    $0x100000,%eax          /* Next meg */
        jmp     1b                      /* Go back to top for another meg */
1:      subl    $0xFFFFC,%eax           /* This is the top of the memory */
        pushl   %eax                    /* Save it on the stack */

/* 
 * Add the exception handlers
 *
 * This sets up the first 32 IDT entries
 * which are reserved for the exception handlers.
 */

        movl    $0x8E00,%ecx
        movl    $etbl,%esi
        xorl    %ebx,%ebx
.p2align 2
1:      movl    (%esi),%eax
        call    _add_idt_gate
        addl    $4,%esi
        incl    %ebx
        cmpl    $32,%ebx
        jb      1b

/* 
 * This sets up the rest of the IDT table to
 * point to the default interrupt handler.
 * except_null
 */
        
        movl    $except_null,%eax
.p2align 2
1:      call    _add_idt_gate
        incl    %ebx
        cmpl    $255,%ebx
        jbe     1b


/* Initialize the DMA */

        movb    $4,%al
        outb    %al,$0x08
        outb    %al,$0xD0
        xorb    %al,%al
        outb    %al,$0x0D
        outb    %al,$0xDA
        movb    $0x40,%al
        outb    %al,$0x0B
        outb    %al,$0xD6
        movb    $0x41,%al
        outb    %al,$0x0B
        outb    %al,$0xD6
        movb    $0x42,%al
        outb    %al,$0x0B
        outb    %al,$0xD6
        movb    $0x43,%al
        outb    %al,$0x0B
        outb    %al,$0xD6
        xorb    %al,%al
        outb    %al,$0x0E
        outb    %al,$0xDC

/* Redirect IRQs to 0x20-0x2F */

        movb    $0x11,%al
        outb    %al,$0x20       /* ICW1, Master */
        outb    %al,$0xA0       /* ICW1, Slave */
        movb    $0x20,%al
        outb    %al,$0x21       /* ICW2, Master */
        movb    $0x28,%al
        outb    %al,$0xA1       /* ICW2, Slave */
        movb    $4,%al
        outb    %al,$0x21       /* ICW3, Master */
        movb    $2,%al
        outb    %al,$0xA1       /* ICW3, Slave */
        movb    $1,%al
        outb    %al,$0x21       /* ICW4, Master */
        outb    %al,$0xA1       /* ICW4, Slave */
        movb    $0xFB,%al       /* Mask all but Cascade on PICU0 */
        outb    %al,$0x21       /* Mask, Master */
        movb    $0xFF,%al       /* Mask all on PICU1 */
        outb    %al,$0xA1       /* Mask, Slave */
        movb    $0x20,%al
        outb    %al,$0x20
        outb    %al,$0xA0
        movl    $0xFFFB,%eax
        movl    %eax,irq_mask           /* Setup the IRQ mask */
        movb    $0x20,%al               /* Set EOI to get interrupts to work */
        outb    %al,$0x20
        outb    %al,$0xA0

/* Initialize the keyboard */

        call    buff_empty
        movb    $0xFA,%al
        outb    %al,$0x60
        call    buff_full
        inb     $0x60,%al
        call    buff_empty
        movb    $0xF0,%al
        outb    %al,$0x60
        call    buff_full
        inb     $0x60,%al
        call    buff_empty
        movb    $0x02,%al
        outb    %al,$0x60
        call    buff_full
        inb     $0x60,%al
        call    buff_empty
        movb    $0x60,%al
        outb    %al,$0x64
        call    buff_empty
        movb    $0x45,%al
        outb    %al,$0x60

/* Setup Paging */

        movl    $pdir,%eax              /* Address of the page directory */
        movl    %eax,%cr3               /* Put it in CR3 */
        movl    %cr0,%eax
        and     $0x80000011,%eax
        testl   $0x10,%eax              /* Test for fpu */
        jne     1f
        orl     $0x4,%eax
1:      orl     $0x80000000,%eax        /* Turn on paging */
        movl    %eax,%cr0

        pushl   $2                      /* Zero the flags */
        popfl

/* Clear the screen */

        movl    $0xB8000,%edi
        movl    $(CONFIG_LINES * 20),%ecx
        movl    $0x07200720,%eax
        rep;    stosl


/* Detect the CPU type */

        pushfl
        popl    %eax
        movl    %eax,%ecx
        xorl    $0x40000,%eax
        pushl   %eax
        popfl
        pushfl
        popl    %eax
        xorl    %ecx,%eax
        movb    $3,CPU_TYPE+cpudata
        jz      end
        pushl   %ecx
        popfl
        movb    $4,CPU_TYPE+cpudata
        movl    %ecx,%eax
        xorl    $0x200000,%eax
        pushl   %eax
        popfl
        pushfl
        popl    %eax
        xorl    %ecx,%eax
        jc      end
        movb    $1,CPUID_FLAG+cpudata
        xorl    %eax,%eax
        cpuid
        movl    %ebx,VENDOR_ID+cpudata
        movl    %edx,VENDOR_ID+4+cpudata
        movl    %ecx,VENDOR_ID+8+cpudata
        movl    $1,%eax
        cpuid
        movl    %eax,CPU_SIGNATURE+cpudata
        movl    %ebx,FEATURES_EBX+cpudata
        movl    %ecx,FEATURES_ECX+cpudata
        movl    %edx,FEATURES_EDX+cpudata
        shrl    $8,%eax
        andl    $0x0F,%eax
        movl    %eax,CPU_TYPE+cpudata
        xorl    %eax,%eax
        cpuid
        cmpl    $2,%eax
        jl      end
        movl    $2,%eax
        cpuid
        cmpb    $1,%al
        jnz     end
        movl    %eax,CACHE_EAX+cpudata
        movl    %ebx,CACHE_EBX+cpudata
        movl    %ecx,CACHE_ECX+cpudata
        movl    %edx,CACHE_EDX+cpudata
        movl    $0x80000000,%eax
        cpuid
        cmpl    $0x80000000,%eax
        jbe     end
        movl    BRAND_STRING+cpudata,%edi
        movl    $0x80000002,%eax
        cpuid
        movl    %eax,(%edi)
        movl    %ebx,4(%edi)
        movl    %ecx,8(%edi)
        movl    %edx,12(%edi)
        addl    $16,%edi
        movl    $0x80000003,%eax
        cpuid
        movl    %eax,(%edi)
        movl    %ebx,4(%edi)
        movl    %ecx,8(%edi)
        movl    %edx,12(%edi)
        addl    $16,%edi
        movl    $0x80000004,%eax
        cpuid
        movl    %eax,(%edi)
        movl    %ebx,4(%edi)
        movl    %ecx,8(%edi)
        movl    %edx,12(%edi)

        fninit
        movl    $0x5a5a,FP_STATUS+cpudata
        fnstsw  FP_STATUS+cpudata
        movl    FP_STATUS+cpudata,%eax
        cmpb    $0,%al
        movl    $0,FPU_TYPE+cpudata
        jnz     end
        fnstcw  FP_STATUS+cpudata
        movl    FP_STATUS+cpudata,%eax
        addl    $0x103F,%eax
        cmpl    $0x3F,%eax
        movl    $0,FPU_TYPE+cpudata
        jnz     end
        movl    $1,FPU_TYPE+cpudata
        cmpl    $3,CPU_TYPE+cpudata
        jnz     end
        fld1
        fldz
        fdivp
        fld     %st
        fchs
        fcompp
        fstsw   FP_STATUS+cpudata
        movl    FP_STATUS+cpudata,%eax
        movl    $2,FPU_TYPE+cpudata
        sahf
        jz      end
        movl    $3,FPU_TYPE+cpudata
end:    sti
        call    start_kernel            /* Enter C code, %eax is on stack */
1:      jmp     1b                      /* Hang if we return */


/************************************************************************* 
 * This whole page is init, so we can free it when we get into the
 * kernel's memory management code.
 *************************************************************************/
.org            0x8000
.section        .init

/*
 * This function adds a gate to the IDT
 *
 * Input: EAX = Address of gate handler
 *        EBX = IDT gate number
 *         CX = 0x8E00 -> interrupt gate
 *              0x8F00 -> trap gate
 *              0xEF00 -> trap gate DPL=3
 */

LOCAL (_add_idt_gate):
        pushl   %eax
        pushl   %ebx
        shll    $3,%ebx
        addl    $0x00101000,%ebx
        movw    %ax,(%ebx)
        shrl    $16,%eax
        movw    %ax,6(%ebx)
        movw    $8,2(%ebx)
        movw    %cx,4(%ebx)
        popl    %ebx
        popl    %eax
        ret

/************************************************/
LOCAL (buff_empty):
        movl    $0x2FFFF,%ecx
.p2align 2
1:      inb     $0x64,%al
        testb   $2,%al
        loopnz  1b
        ret

/************************************************/
LOCAL (buff_full):
        movl    $0x2FFFF,%ecx
.p2align 2
1:      inb     $0x64,%al
        testb   $1,%al
        loopz   1b
        ret


/*************************************************************************/
.section        .rodata

LOCAL (etbl):
        .long   except00, except01, except02, except03                  /* 0x00 - 0x03 */
        .long   except04, except05, except06, except07                  /* 0x04 - 0x07 */
        .long   except08, except09, except10, except11                  /* 0x08 - 0x0B */
        .long   except12, except13, except14, except15                  /* 0x0C - 0x0F */
        .long   except16, except17, except18, except19                  /* 0x10 - 0x13 */       
        .long   except_null, except_null, except_null, except_null      /* 0x14 - 0x17 */
        .long   except_null, except_null, except_null, except_null      /* 0x18 - 0x1B */
        .long   except_null, except_null, except_null, except_null      /* 0x1C - 0x1F */
        

LOCAL (idtr):
        .word   0x7FF
        .long   0x101000

LOCAL (gdtr):
        .word   0x27FF
        .long   0x101800

LOCAL (stack_start):
        .long   stack
        .word   0x10


/*************************************************************************/
.section        .bss

.p2align 2
                        .fill   1024,4,0        /* 4kb stack */
GLOBAL (stack):         .long   0
GLOBAL (cpudata):       .fill   28,4,0
GLOBAL (irq_mask):      .long   0

